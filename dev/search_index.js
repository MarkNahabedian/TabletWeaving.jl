var documenterSearchIndex = {"docs":
[{"location":"examples/simple_chevron/","page":"Simple Example","title":"Simple Example","text":"Here's a simple pattern, found at http://research.fibergeek.com/2002/10/10/first-tablet-weaving-double-diamonds/","category":"page"},{"location":"examples/simple_chevron/","page":"Simple Example","title":"Simple Example","text":"using Colors\nusing TabletWeaving\n\n# A function for setting up tablets to weave a simple symetric\n# diagonal line pattern that can weave chevrons or diamonds:\nfunction make_diamond_tablets()\n    f = RGB(0.0, 0.8, 0.0)\n    b = RGB(0.6, 0.3, 0.3)\n    id = 0  \n    function tab(a, b, c, d, threading)\n        id += 1\n        Tablet{Color}(; id=id, a=a, b=b, c=c, d=d, threading=threading)\n    end\n    s = threading_for_char('s')\n    z = threading_for_char('z')\n    [\n        # Border:\n        tab(b, b, b, b, z),   #  1\n        tab(b, b, b, b, z),   #  2\n        tab(f, f, f, f, z),   #  3\n        # Pattern:\n        tab(b, f, f, b, s),   #  4\n        tab(f, f, b, b, s),   #  5\n        tab(f, b, b, f, s),   #  6\n        tab(b, b, f, f, s),   #  7\n        tab(b, f, f, b, s),   #  8\n        tab(f, f, b, b, s),   #  9\n        tab(f, b, b, f, s),   # 10\n        tab(b, b, f, f, s),   # 11\n        # Reverse:\n        tab(b, b, f, f, z),   # 12\n        tab(f, b, b, f, z),   # 13\n        tab(f, f, b, b, z),   # 14\n        tab(b, f, f, b, z),   # 15\n        tab(b, b, f, f, z),   # 16\n        tab(f, b, b, f, z),   # 17\n        tab(f, f, b, b, z),   # 18\n        tab(b, f, f, b, z),   # 19\n        # Enough!\n        # border\n        tab(f, f, f, f, s),   # 20\n        tab(b, b, b, b, s),   # 21\n        tab(b, b, b, b, s)#   22\n    ]\nend\n\nlet\n    initial_tablets = make_diamond_tablets()\n    function rotation_plan(tablets, row_number, column_number)\n        if row_number in 1:8\n            Backward()\n        elseif row_number in 9:24\n            Forward()\n        else\n            nothing\n        end\n    end\n    tablets = copy.(initial_tablets)\n    top, bottom, instructions =\n\ttablet_weave(tablets, rotation_plan)\n    pattern =\n        TabletWeavingPattern(\"Diamond/Chevron Pattern\",\n                             nothing,\n                             initial_tablets,\n                             instructions,\n                             tablets,\n                             top, bottom)\n    HTML(string(pretty(pattern)))\nend","category":"page"},{"location":"examples/from_an_image/","page":"From an Image","title":"From an Image","text":"We can turn a two color image into a tablet weaving pattern.","category":"page"},{"location":"examples/from_an_image/","page":"From an Image","title":"From an Image","text":"First we need an image.  I was playing around with the idea of visualizing \"Gray Code\" in a weaving project.  Gray Code is a way of counting in binary where onlu one bit changes on each count.","category":"page"},{"location":"examples/from_an_image/","page":"From an Image","title":"From an Image","text":"We can use it to make an image, described by a two domensional Julia Array of RGB colors:","category":"page"},{"location":"examples/from_an_image/","page":"From an Image","title":"From an Image","text":"using Colors\nusing TabletWeaving\n\n# Turn a regular binary number to its corresponding Gray Code :\ngraycode(x) = xor(x, x >>> 1)\n\n# Weneed two colors for our image:\nCOLORS = [ RGB(1, 0, 0), RGB(0, 1, 0)]\n\ngray_sequence = [digits(graycode(x); base = 2, pad = 8) for x in 0:63]\n\n# Our basic Gray Code pattern:\nGRAY_PATTERN = map(hcat(gray_sequence...)) do bit\n\tCOLORS[bit + 1]\nend","category":"page"},{"location":"examples/from_an_image/","page":"From an Image","title":"From an Image","text":"I like that, but ","category":"page"},{"location":"examples/from_an_image/","page":"From an Image","title":"From an Image","text":"GRAY_WEAVE = let\n\t# Reflect GRAY_PATTERN on both axes and add leading and trailing background:\n\tpattern = GRAY_PATTERN\n\tfor _ in 1:4\n\t\tpattern = hcat(pattern[:, 1], pattern)\n\tend\n\tbottom = hcat(pattern, reverse(pattern; dims=2))\n\tvcat(reverse(bottom; dims=1), bottom)\nend","category":"page"},{"location":"examples/from_an_image/","page":"From an Image","title":"From an Image","text":"I like that.  How do I weave it.  This will show us the pattern:","category":"page"},{"location":"examples/from_an_image/","page":"From an Image","title":"From an Image","text":"WOVEN_GRAY_PATTERN = \n                   TabletWeavingPattern(\"Gray Code Pattern\", GRAY_WEAVE;\n                   \tthreading_function = symetric_threading!)\n\nHTML(string(pretty(WOVEN_GRAY_PATTERN)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TabletWeaving","category":"page"},{"location":"#TabletWeaving","page":"Home","title":"TabletWeaving","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TabletWeaving.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [ \"index.md\" ]\nDepth = 6","category":"page"},{"location":"#Tablets","page":"Home","title":"Tablets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A tablet or card is a square piece of card stock.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It has a front and a back.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It has a hole on each of it's four corners.","category":"page"},{"location":"","page":"Home","title":"Home","text":"When looking at the front of the card, the holes are labeled A, B, C, and D clockwise.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The edges of the card are numbered, with the edge from corner A to corner B numbered 1.  The edge between B and C numbered 2, and so on around the card.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For weaving, one warp thread passes through each hole.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The four warp threads for a tablet pass from the warp beam, through the tablet, to the cloth beam.  They can pass through the tablet from BackToFront or FrontToBack.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Which thread passes through which hole, and how the tablet is threaded, can not change once the loom is warped.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It's easier to think about how the stitches are formed if the tablets are facing (either back or front depending on threading) the weaver.  For compactness though the cards are stacked so that the weaver is facing their edges.  When stacked, each tablet can be oriented FrontToTheRight or FrontToTheLeft.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Which direction a tablet is facing when it is stacked can be changed during weaving.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For each new row, each tablet must be rotated, and its stacking may be flipped.  These operations affect the locations of the labeled holes (and their warp threads) relative to the loom.","category":"page"},{"location":"#Tablet-Structure","page":"Home","title":"Tablet Structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We represent each edge of a tablet by a TabletEdge and each hole by a TabletHole:","category":"page"},{"location":"","page":"Home","title":"Home","text":"TabletHole\nTabletEdge","category":"page"},{"location":"#TabletWeaving.TabletHole","page":"Home","title":"TabletWeaving.TabletHole","text":"A TabletHole represents one of the corner holes in a tablet.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.TabletEdge","page":"Home","title":"TabletWeaving.TabletEdge","text":"A TabletEdge` represents a single edge of a tablet.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"The functions next, previousand opposite can beapplied to a TabletHole or a TabletEdge to get the next, previous, or opposite one respectively.","category":"page"},{"location":"","page":"Home","title":"Home","text":"next_hole\nprevious_hole","category":"page"},{"location":"#TabletWeaving.next_hole","page":"Home","title":"TabletWeaving.next_hole","text":"next_hole(::TabletEdge)\n\nReturn the hole following the specified edge.\n\n\n\n\n\n","category":"function"},{"location":"#TabletWeaving.previous_hole","page":"Home","title":"TabletWeaving.previous_hole","text":"previous_hole(::TabletEdge)\n\nReturn the hole preceeding the specified hole.\n\n\n\n\n\n","category":"function"},{"location":"#Tablet-Threading","page":"Home","title":"Tablet Threading","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"How the warp threads pass through a tablet, the TabletThreading, can either be BackToFront or FrontToBack.","category":"page"},{"location":"","page":"Home","title":"Home","text":"for BackToFront threading, warp threads pass from the warp beam through the tablet from back to front and then to the cloth beam.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For FrontToBack threading, Warp threads pass from the warp beam through the tablet from front to back and then to the cloth beam.","category":"page"},{"location":"","page":"Home","title":"Home","text":"These threadings also have a concise textual representation.  BackToFront can be represented by /or z.  BackToFront can be represented by \\\\ or s.","category":"page"},{"location":"","page":"Home","title":"Home","text":"BackToFront\nFrontToBack\nthreading_for_char\nthreading_char","category":"page"},{"location":"#TabletWeaving.BackToFront","page":"Home","title":"TabletWeaving.BackToFront","text":"Warp threads pass from the warp beam through the tablet from back to front.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.FrontToBack","page":"Home","title":"TabletWeaving.FrontToBack","text":"Warp threads pass from the warp beam through the tablet from front to back.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.threading_for_char","page":"Home","title":"TabletWeaving.threading_for_char","text":"threading_for_char(::AbstractChar)\n\nGiven an 's' or a 'z', return an instance of the the corresponding TabletThreading.\n\nThere seems to be some confusion in the tablet weaving community about which is which.  In this code base, 'z' corresponds to BackToFront threading.\n\n\n\n\n\n","category":"function"},{"location":"#TabletWeaving.threading_char","page":"Home","title":"TabletWeaving.threading_char","text":"threading_char(::TabletThreading)\n\nReturn the character ('s' or 'z' corresponding to the specified tablet threading.  See threading_for_char.\n\n\n\n\n\n","category":"function"},{"location":"#Tablet-Stacking","page":"Home","title":"Tablet Stacking","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If the tablets are arranged with a flat side facing the weaver this would take too much space and also cause other inconveniences.  Instead, tablets are arrahged so that their flat faces face each other.  This forms a horizontal stack from one side of the loom to the other.","category":"page"},{"location":"","page":"Home","title":"Home","text":"When stacked like this, a tablet is said to be stacked FrontToTheRight if it's front face faces towards the right side of the loom rom the weaver's perspective. A tablet facing the opposite direction is said to be threaded FrontToTheLeft.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For brevity in textual representations, FrontToTheRight is represented with a → right arrow and FrontToTheLeft with a ← left arrow.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TabletStacking\nFrontToTheRight\nFrontToTheLeft\ntablet_stacking_to_char","category":"page"},{"location":"#TabletWeaving.TabletStacking","page":"Home","title":"TabletWeaving.TabletStacking","text":"TabletStacking is the abstract supertype for which way a tablet is facing when stacked.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.FrontToTheRight","page":"Home","title":"TabletWeaving.FrontToTheRight","text":"In FrontToTheRight stacking,  the tablet is stacked so that its front faces the weaver's right.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.FrontToTheLeft","page":"Home","title":"TabletWeaving.FrontToTheLeft","text":"In FrontToTheRight stacking,  the tablet is stacked so that its front faces the weaver's left.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.tablet_stacking_to_char","page":"Home","title":"TabletWeaving.tablet_stacking_to_char","text":"tablet_stacking_to_char(::TabletStacking)\n\nReturn an arrow showing which direction the front of a tablet is currently facing.\n\n\n\n\n\n","category":"function"},{"location":"#Tablet","page":"Home","title":"Tablet","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tablet\nwarp_color\ntop_edge","category":"page"},{"location":"#TabletWeaving.Tablet","page":"Home","title":"TabletWeaving.Tablet","text":"Tablet\n\nTablet describes the setup and current state of a single tablet weaving card.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.warp_color","page":"Home","title":"TabletWeaving.warp_color","text":"warp_color(::Tablet, ::TabletHole)\n\nReturn the color of the warp thread that passes through the specified hole of the specified tablet.\n\n\n\n\n\n","category":"function"},{"location":"#TabletWeaving.top_edge","page":"Home","title":"TabletWeaving.top_edge","text":"top_edge(::Tablet)::TabletEdge\n\nReturn the TabletEdge of the top edge of the tablet. This edge is easier to see on the loom than the shed edge It is also unaffected by the tablet's stacking.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"We use a Vector of Tablets to describe how the loom is set up for weaving.  for convenience, we can add these vectors together for a wider pattern.  We can also multiply them to repeat tablets.","category":"page"},{"location":"#Tablet-Rotation","page":"Home","title":"Tablet Rotation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Prior to each new throw of the weft, the tablets are rotated to open a new shed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In practice (the stacked arrangement), a card will be rotated forward or backward.  Forward rotation moves the top corner of the card closest to the weaver away from the weaver towards the warp beam.  Backward rotation moves the top corner furthest from the weaver toards the weaver.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Whether forward rotation turns the card in the ABCD or the  DCBA direction depends on how the card is threaded and stacked.","category":"page"},{"location":"","page":"Home","title":"Home","text":"RotationDirection\nrotation\nABCD\nDCBA\nClockwise\nCounterClockwise\nForward\nBackward","category":"page"},{"location":"#TabletWeaving.RotationDirection","page":"Home","title":"TabletWeaving.RotationDirection","text":"RotationDirection\n\nRotationDirection is the abstract supertype of all tablet rotations.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.rotation","page":"Home","title":"TabletWeaving.rotation","text":"rotation(::Tablet, ::RotationDirection)\n\nReturn the change in the Tablet's accumulated_rotation if the specified `AbstractRotation is applied.\n\n\n\n\n\n","category":"function"},{"location":"#TabletWeaving.ABCD","page":"Home","title":"TabletWeaving.ABCD","text":"The ABCD rotation causes the A corner of the tablet to move to the location in space previously occupied by the B corner.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.DCBA","page":"Home","title":"TabletWeaving.DCBA","text":"The DCBA rotation causes the A corner of the tablet to move to the location in space previously occupied by the D corner.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.Clockwise","page":"Home","title":"TabletWeaving.Clockwise","text":"The Clockwise direction refers to how the tablet would move if its front or back face (depending on threading) were facing the weaver.  Whether this results in ABCD or DCBA rotation depends on how the card is threaded.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.CounterClockwise","page":"Home","title":"TabletWeaving.CounterClockwise","text":"The CounterClockwise direction refers to how the tablet would move if its front or back face (depending on threading)  were facing the weaver.  Whether the front or the back of the tablet is facing the weaver depends on whether the card is BackToFrontorFrontToBack` threaded.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.Forward","page":"Home","title":"TabletWeaving.Forward","text":"The Forward rotation moves the top corner of the tablet closest to the weaver and the cloth beam to be the bottom corner closest to the weaver.\n\n\n\n\n\n","category":"type"},{"location":"#TabletWeaving.Backward","page":"Home","title":"TabletWeaving.Backward","text":"The Backward rotation moves the top corner of the tablet closest to the weaver and the cloth beam to be the bottom corner closest to the weaver.\n\n\n\n\n\n","category":"type"},{"location":"#Weaving","page":"Home","title":"Weaving","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To weave, the weaver first rotates the tablets according to some pattern.  Rotating the tablets opens a new shed.  The shuttle is then past through the new shed to finish weaving that row.","category":"page"},{"location":"","page":"Home","title":"Home","text":"rotate!\nshot!\n\n\n\n## Describing a Pattern\n\nHow to Describe Tablet Motion During Weaving?\n\nAfter each throw, each tablet must be rotated **forward** or\n**backward** to make a new shed.  In the simplest patterns, all\ntablets are rotated in the same direction.  For our gray code pattern\nhowever, tablets move in different directions for each shed.  How can\nwe represent these rotations for ease of execution by the weaver?\n\nThere is one set of tablet motions for each throw of the shuttle.  We\nshould have a row number.  The weaver must keep track of which row\nthey're working.\n\nThere is motion for each tablet.  The motion of a single tablet can be\nconcisely described by unicode arrows (🡑, 🡓) or by the edge number of\nthe tablet that is facing the shed or on top.  The latter is less\nerror prone since an incorrect starting position for a tablet will be\ndetected.\n\nThe simplest representation is a `Vector` for the whole pattern.  Each\nelement would be a `Vector` of digits from `1` to `4` indicating the\nedge of the tablet that's currently \"on top\".\n\n\n## Designing a Pattern\n\n### Simple Patterns\n","category":"page"},{"location":"#TabletWeaving.rotate!","page":"Home","title":"TabletWeaving.rotate!","text":"rotate!(::Tablet, ::RotationDirection)\n\nRotate the tablet by one position in the specified direction.\n\n\n\n\n\n","category":"function"},{"location":"#TabletWeaving.shot!","page":"Home","title":"TabletWeaving.shot!","text":"shot!(::Tablet)\n\nApply the current rotation to the tablet and return the colors of the warp threads passing over the top and bottom of the fabric, and the crossing direction (as a forward or backslash character) when looking at that face of the fabric.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"@docs simplerotationplan","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n### Going from an Image to a Pattern\n\nWe have an array of the \"image\" we want to weave.  How do we translate\nthat into a set of tablets, their warping, and their motions?\n\nHow do we execute that \"plan\" to produce a stitch image to see how the\npattern turned out.\n\nFor a two color pattern, we can warp each tablet with one color in\nholes **A** and **C** and the other in holes **B** and **D**.\nWhatever the previous stitch, the tablet can be rotated to either\ncolor.  The slant of the stitch can't be controlled though.\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs tabletsforimage","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n`tablets_for_image` does nothing about tablet threading, only colors.\n\nThe tablet weaving patterns I've been all seem to have one threading\non one side of the pattern and another threading on the other side,\nwith the possible exception of the borders having different threading\nfrom the field.\n\nWe can introduce a function that sets one threading from the edge to\nthe middle and switches to the other threading for the other half.\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs symetric_threading!","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@docs TabletWeavingPattern","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n\n\n\n\n\n\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@index","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@autodocs Modules = [TabletWeaving] ```","category":"page"},{"location":"examples/text/","page":"Weaving Text","title":"Weaving Text","text":"We could weave text.","category":"page"},{"location":"examples/text/","page":"Weaving Text","title":"Weaving Text","text":"I found a 5×7 dot matrix font that might be used to weave text.","category":"page"},{"location":"examples/text/","page":"Weaving Text","title":"Weaving Text","text":"using Colors\nusing TabletWeaving\n\ndotmatrix(c) = FONT_5x7[c]\n\nfunction spaceing(v)\n    space = zeros(Int, 7)\n    result = []\n    for m in v\n        if length(result) > 0\n            push!(result, space)\n        end\n        push!(result, m)\n    end\n    result\nend\n\ncolor(bit) = [ RGB(1, 1, 1), RGB(0, 0, 0) ][bit + 1]\n\ncompose_line(line) =\n    hcat(spaceing([dotmatrix(c) for c in line])...)\n\ncolor.(compose_line(\"HELLO!\"))","category":"page"},{"location":"examples/text/","page":"Weaving Text","title":"Weaving Text","text":"We can also compose multiple lines:","category":"page"},{"location":"examples/text/","page":"Weaving Text","title":"Weaving Text","text":"using Base.Iterators\n\nfunction compose(composed_lines; leading=1, align=0)\n    len(line) = size(line)[2]\n    padded_lines = []\n    space = zeros(Int, 7)\n    width = maximum(len, composed_lines)\n    for line in composed_lines\n        if length(padded_lines) > 0\n            for i in leading\n                push!(padded_lines, zeros(Int, 1, width))\n            end\n        end\n        need = width - len(line)\n        left = []\n        right = []\n        if align < 0        # left align, right pad\n            left = repeated(space, need)\n        elseif align > 0    # right align, left pad\n            right = repeated(space, need)\n        else                # center\n            f = floor(Int, need/2)\n            left = repeated(space, f)\n            right = repeated(space, need - f)\n        end\n\n        push!(padded_lines,\n              hcat(left..., line, right...))\n    end\n    vcat(padded_lines...)\nend\n\nMESSAGE = color.(compose(compose_line.([\"THIS IS\", \"A TEST\"]); leading=2))","category":"page"},{"location":"examples/text/","page":"Weaving Text","title":"Weaving Text","text":"How might it  look woven:","category":"page"},{"location":"examples/text/","page":"Weaving Text","title":"Weaving Text","text":"WOVEN = \n    TabletWeavingPattern(\"Sample Text\", MESSAGE;\n                   \t threading_function = symetric_threading!)\n\nHTML(string(pretty(WOVEN)))","category":"page"}]
}
